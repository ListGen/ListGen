/* Util
 * Author: bhuelga
 */

/*   Constants   */



/*   Utility Functions   */


/* Stagger Show Or Hide
 * --------------------
 * Staggers the hiding or show of a list of elements.
 */
var staggerShowOrHide = function(elements, show=true, reverse=false, betweenDelay=25, selfDelay=100) {
	if (reverse) elements = $(elements).get().reverse();
	$(elements).each(function(i) {
		setTimeout(() => {
			if (show)
				$(this).show(selfDelay);
			else
				$(this).hide(selfDelay);
		}, betweenDelay * i);
	});
}
/* Nav Controller
 * Author: bhuelga
 */

var signedIn = true;

const navBreakpoint = 800;
const delayMedium = 300;
const delayFast = 200;

/* Nav Controller
 * ----
 * Controls the top, bottom, and side navs.
 */

class NavController {
	constructor() {
		this._querySelectors();
		this._addEventListeners();
		this._initializeNavs();
	}

	/* Query Selectors - private
	 * ---------------
	 * Selects all elements on nav menus that persist through all screens
	 */
	_querySelectors() {
		this.main = $('main');
		this.accountPic = $('.account-pic');
		this.signIn = $('.sign-in');

		this.topNavLinks = $('#top-nav-links-container');

		this.navMenuHeader = $('#nav-menu-header');
		this.navMenuHeaderIcon = $('#nav-menu-header a');
		this.navMenuHam = $('#nav-menu-hamburger');
		this.navMenu = $('#nav-menu');
		this.navMenuLinksSignedIn = $('.nav-menu-links.signed-in div');
		this.navMenuLinksSignedOut = $('.nav-menu-links.signed-out div');
	}

	/* Add Event Listeners - private
	 * ---------------
	 * Sets event listeners on all nav buttons and menus.
	 */
	_addEventListeners() {
		$(window).resize(() => {
			if (this.main.width() >= navBreakpoint && this.prevWidth < navBreakpoint)
				this.topNavLinks.show(delayMedium);
			else if (this.main.width() < navBreakpoint && this.prevWidth > navBreakpoint)
				this.topNavLinks.hide(delayMedium);
			this.prevWidth = this.main.width();
		});

		this.main.click(() => this._toggleNav(false));

		this.navMenuHam.click(() => {
			this.navMenuHam.toggleClass('is-active');
			this._toggleNav(this.navMenuHam.hasClass('is-active'));
		});
	}

	/* Toggle Nav - private
	 * ---------------
	 * Opens and closes the nav menu.
	 *
	 * @param open bool : true if opening nav, false if closing nav
	 */
	_toggleNav(open) {
		if (open) {
			const navSize = (this.main.width() >= navBreakpoint) ? '30%' : '80%';
			this.main.css('filter', 'brightness(.2)');
			$('body').css('overflow', 'hidden');
			this.navMenu.width(navSize);
			this.navMenuHeader.width(navSize);
			setTimeout(() => {
				this.navMenuHeaderIcon.show(delayFast);
				if (signedIn)
					staggerShowOrHide(this.navMenuLinksSignedIn);
				else
					staggerShowOrHide(this.navMenuLinksSignedOut);
			}, delayFast);
			this.topNavLinks.hide(delayFast);
		} else {
			this.main.css('filter', 'brightness(1)');
			$('body').css('overflow', 'initial');
			this.navMenu.width(0);
			this.navMenuHeader.width(0);
			this.navMenuHeaderIcon.hide(delayFast);
			if (signedIn)
				staggerShowOrHide(this.navMenuLinksSignedIn, false, true, 15, 75);
			else
				staggerShowOrHide(this.navMenuLinksSignedOut, false, true, 15, 75);
			this.navMenuHam.removeClass('is-active');
			if (this.main.width() >= navBreakpoint)
				this.topNavLinks.show(delayFast);
		}
	}

	/* Initialize App - private
	 * ---------------
	 * Initializes all local data for the website.
	 */
	_initializeNavs() {
		this.prevWidth = this.main.width();
		if (this.main.width() > navBreakpoint) this.topNavLinks.show();
	}

}

const navController = new NavController();
/* Templates - Mid-Quarter PMA
 * Author: bhuelga
 *
 * Holds all of the template information. Read in upon app launch.
 * Simply add a new object under the correct section to add a new template
 * to the creator.
 */

// number of pixels per inch / half-page of PMA
const inch = 92.65;
const page = inch * 8.5;

var templates = 
{ 
	"mq" : {	
		"Outside" : {
			"static-sections" : [
				{
					"name" : "Agent Logo",
					"type" : "image",
					"src" : "../../images/km-homes.PNG",
					"coordinates" : [.5 * inch, .5 * inch],
					"size" : [1.125 * inch, 2.75 * inch]
				},
				{
					"name" : "Return Address 1",
					"type" : "text",
					"text" : "P. O. Box 222400",
					"font-size" : 11,
					"font-color" : 'black',
					"coordinates" : [.875 * inch, 3.25 * inch]
				},
				{
					"name" : "Return Address 2",
					"type" : "text",
					"text" : "Carmel, CA 93923",
					"font-size" : 10,
					"font-color" : 'black',
					"coordinates" : [1.125 * inch, 3.25 * inch]
				}, 
				{
					"name" : "Postage",
					"type" : "image",
					"src" : "",
					"coordinates" : [0, 0],
					"size" : [0, 0],
				},
				{
					"name" : "Front Website",
					"type" : "text",
					"text" : "KYLEMORRISONHOMES.COM",
					"font-size" : 12,
					"font-color" : 'black',
					"coordinates" : [5 * inch, .5 * inch]
				}
			],
			"edit-sections" : [
				{
					"name" : "Attention Grabber",
					"top" : 2 * inch, 
					"left" : .75 * inch,
					"height" : 1.625 * inch,
					"width" : 3.25 * inch,
					"edit-top" : -35,
					"edit-left" : 3.25 * inch + 5,
					"toggle-top" : -35,
					"toggle-left" : 0
				},
				{
					"name" : "Front Graph",
					"top" : 5.5 * inch, 
					"left" : 0,
					"height" : 4.25 * inch,
					"width" : page,
					"edit-top" : -35,
					"edit-left" : page + 5,
					"toggle-top" : -35,
					"toggle-left" : page - 300
				},
				{
					"name" : "Front Bar",
					"top" : 10 * inch, 
					"left" : .25 * inch,
					"height" : .875 * inch,
					"width" : 8 * inch,
					"edit-top" : -420,
					"edit-left" : 8 * inch + 5,
					"toggle-top" : -35,
					"toggle-left" : 8 * inch - 300
				},
				{
					"name" : "Top Image",
					"top" : .5 * inch, 
					"left" : page + 6.625 * inch,
					"height" : 1.325 * inch,
					"width" : 1.125 * inch,
					"edit-top" : 0,
					"edit-left" : -305,
					"toggle-top" : -35,
					"toggle-left" : -300 + 1.125 * inch
				},
				{
					"name" : "City Highlights",
					"top" : 2 * inch, 
					"left" : page + 1.25 * inch,
					"height" : 3.25 * inch,
					"width" : 6.5 * inch,
					"edit-top" : -35,
					"edit-left" : -305,
					"toggle-top" : -35,
					"toggle-left" : 0
				},
				{
					"name" : "Area Highlights",
					"top" : 5.5 * inch, 
					"left" : page + 1.25 * inch,
					"height" : 3.25 * inch,
					"width" : 6.5 * inch,
					"edit-top" : -35,
					"edit-left" : -305,
					"toggle-top" : -35,
					"toggle-left" : 0
				},
				{
					"name" : "Call To Action",
					"top" : 8.875 * inch, 
					"left" : page + .25 * inch,
					"height" : 1.625 * inch,
					"width" : 8 * inch,
					"edit-top" : -350,
					"edit-left" : -305,
					"toggle-top" : -35,
					"toggle-left" : 0
				}
			]
		},
		"Inside" : {
			"static-sections" : [
				{
					"name" : "Border",
					"type" : "image",
					"src" : "../../images/inside_border.PNG",
					"coordinates" : [0, 0],
					"size" : [11 * inch, 2 * page],

				}
			],
			"edit-sections" : [
				{
					"name" : "Inside Bar",
					"type" : "text",
					"top" : 9.5 * inch, 
					"left" : .5 * inch,
					"height" : 1.375 * inch,
					"width" : 7.875 * inch,
					"edit-top" : -370,
					"edit-left" : 7.875 * inch + 5,
					"toggle-top" : -35,
					"toggle-left" : 7.875 * inch - 300
				},
				{
					"name" : "Listings And Sales",
					"type" : "listings",
					"top" : 1.75 * inch, 
					"left" : page + .5 * inch,
					"height" : 9.125 * inch,
					"width" : 7.125 * inch,
					"edit-top" : -35,
					"edit-left" : -305,
					"toggle-top" : -35,
					"toggle-left" : 0
				}
			]
		}
	}
}

/* MQ PMA Creator - Util
 * Author: bhuelga
 */

// local data of session
var localData = {
	'mlsAreas' : {
		'Carmel Highlands' : {
			'sections' : {
				'Attention Grabber' : {
					'status' : 'Incomplete',
					'default-choice' : '',
					'system-choices' : ['../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										]
				},
				'Front Graph' : {
					'status' : 'Incomplete',
					'default-choice' : '',
					'system-choices' : ['../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										]
				},
				'Front Bar' : {
					'status' : 'Incomplete',
					'default-choice' : '',
					'system-choices' : ['../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										]
				},
				'Top Image' : {
					'status' : 'Incomplete',
					'default-choice' : '',
					'system-choices' : ['../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										]
				},
				'City Highlights' : {
					'status' : 'Incomplete',
					'default-choice' : '',
					'system-choices' : ['../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										]
				},
				'Area Highlights' : {
					'status' : 'Incomplete',
					'default-choice' : '',
					'system-choices' : ['../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										]
				},
				'Call To Action' : {
					'status' : 'Incomplete',
					'default-choice' : '',
					'system-choices' : ['../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										]
				},
				'Inside Bar' : {
					'status' : 'Incomplete',
					'default-choice' : '',
					'system-choices' : ['../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										]
				},
				'Listings And Sales' : {
					'status' : 'Incomplete',
					'default-choice' : '',
					'system-choices' : ['../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										'../images/home-screen/house1.jpg',
										]
				},

			}
		},
		'Pebble Beach' : {

		}
	}
};

// section names to ids
const NAME_TO_ID = {
	'Attention Grabber' : 'attention-grabber',
	'Front Graph' : 'front-graph',
	'Front Bar' : 'front-bar',
	'Top Image' : 'top-image',
	'City Highlights' : 'city-highlights',
	'Area Highlights' : 'area-highlights',
	'Call To Action' : 'call-to-action',
	'Inside Bar' : 'inside-bar',
	'Listings And Sales' : 'listings-and-sales'
}

// section ids to names
const ID_TO_NAME = {
	'attention-grabber' : 'Attention Grabber',
	'front-graph' : 'Front Graph',
	'front-bar' : 'Front Bar',
	'top-image' : 'Top Image',
	'city-highlights' : 'City Highlights',
	'area-highlights' : 'Area Highlights',
	'call-to-action' : 'Call To Action',
	'inside-bar' : 'Inside Bar',
	'listings-and-sales' : 'Listings And Sales'
}

// W x H in inches of PMA
const PMA_SIZE = [17, 11];

// colors 
const STATUS_COLORS = {
	'Incomplete' : '#8A8A8A',
	'complete' : '#33C451',
};

// toggle switch html
const switchHTML = '<label class="switch switch-light switch-holo" onclick=""><input type="checkbox"><span><span class="incomplete">Incomplete</span><span class="complete">Complete</span><a></a></span></label>'

/* Crop
 * Returns a cropped canvas given a canvas and crop region.
 *
 * @param a object : {x: number, y: number} - left top corner
 * @param b object : {x: number, y: number} - bottom right corner
 */
function crop(can, a, b) {
    const ctx = can.getContext('2d');
    const imageData = ctx.getImageData(a.x, a.y, b.x, b.y);
  
    let newCan = document.createElement('canvas');
    newCan.width = b.x - a.x;
    newCan.height = b.y - a.y;
    const newCtx = newCan.getContext('2d');
  
    newCtx.putImageData(imageData, 0, 0);
  
    return newCan;    
 }

// saves outside PMA
function savePMA() {
	const outside = $('#outside')[0].toDataURL();
	const inside = $('#inside')[0].toDataURL();
	const pdf = new jsPDF({
	                        orientation: canvas.width >= canvas.height ? 'landscape' : 'portrait',
	                        unit: 'in',
	                        format: PMA_SIZE
	                    });
	pdf.addImage(outside, 'PNG', 0, 0);
	pdf.addPage();
	pdf.addImage(inside, 'PNG', 0, 0);
	pdf.save("canvas.pdf");
}

/* MQ PMA Creator - Top Bar
 * Author: bhuelga
 */

class TopBar {

	/* Top Bar
	 * ---------------
	 * Controls the top bar of the creator.
	 */
	constructor(areaCallback, windowCallback) {
		// Save callbacks
		this.areaCallback = areaCallback;
		this.windowCallback = windowCallback;
		
		this._querySelectors();
		this._addEventListeners();
	}

	/* Query Selectors - private
	 * ---------------
	 * Selects all sections of PMA screen.
	 */
	_querySelectors() {
		// Area Dropdown
		this.topAreaDropdown = $('#top-areas .top-dropdown span');
		this.topAreaContent = $('#top-areas .top-dropdown-content');
		this.topAreaName = $('#top-areas .top-dropdown span');

		// Steps
		this.topSteps = $('#top-steps');
		this.topStepEditor = $('#top-step-editor');
		this.topStepMailing = $('#top-step-mailing');
		this.topStepPreview = $('#top-step-preview');
	}

	/* Add Event Listeners - private
	 * ---------------
	 * Sets event listeners.
	 */
	_addEventListeners() {
		this._addAreaEventListeners();
		this._addStepEventListeners();
	}

	/* Add Area Event Listeners - private
	 * ---------------
	 * Sets event listeners to area dropdown.
	 */
	_addAreaEventListeners() {
		// Closes dropdown on outside click
		$(document).click(() => {
		    $('.top-dropdown-content').addClass('hidden');
		});

		// Opens Area Dropdown
		this.topAreaDropdown.click((e) => {
			e.stopPropagation();
			$('.top-dropdown-content').toggleClass('hidden');
		});

		// Switches Area Name and calls callback
		this.topAreaContent.click((e) => {
			const newArea = $(e.target).html();
			this.topAreaDropdown.html(newArea);
			this.areaCallback(newArea);
		});
	}

	/* Add Step Event Listeners - private
	 * ---------------
	 * Sets event listeners to step breadcrumb.
	 */
	_addStepEventListeners() {
		changeStep = changeStep.bind(this);

		// changes to editor, mailing list, or final preview
		this.topStepEditor.click(() => changeStep(0));
		this.topStepMailing.click(() => changeStep(2));
		this.topStepPreview.click(() => changeStep(4));

		function changeStep(stepNum) {
			const numChildren = this.topSteps.children().length;
			for (let i = 0; i < numChildren; i++) {
				if (i <= stepNum)
					$(this.topSteps.children().get(i)).addClass('selected');
				else
					$(this.topSteps.children().get(i)).removeClass('selected');
			}
			this.windowCallback(stepNum / 2);
		}
	}



	/*   PUBLIC    */

	/* Set Area Title - public
	 * ---------------
	 * Displays the name of the area being worked on.
	 */
	setAreaTitle(newArea) {
		this.topAreaDropdown.html(newArea);
	} 

}
/* MQ PMA Creator - Side Bar
 * Author: bhuelga
 */

const delay = 500;

 class SideBar {

 	/* Side Bar
 	 * ---------------
 	 * Controls the side bar of the creator.
 	 */
 	constructor(colorSchemeCallback, fontStyleCallback) {
 		this.colorSchemeCallback = colorSchemeCallback;
 		this.fontStyleCallback = fontStyleCallback;

 		this._querySelectors();
 		this._addEventListeners();
 	}

 	/* Query Selectors - private
	 * ---------------
	 * Selects all sections of PMA screen.
	 */
	_querySelectors() {
		// Container
		this.sideBar = $('#side-bar');

		// Step Options
		this.editSideOptions = $('#edit-side-options');
		this.colorSchemeContent = $('#color-scheme-content');
		this.fontStyleContent = $('#font-style-content');
		this.navigationContent = $('#navigation-content');

		this.mailingSideOptions = $('#mailing-side-options');
	}

	/* Add Event Listeners - private
	 * ---------------
	 * Sets event listeners.
	 */
	_addEventListeners() {
		// Controls accordions
		this.editSideOptions.on('click', '.accordion-header', function() {
    		$(this).toggleClass('active').next().slideToggle();
    		if ($(this).hasClass('active'))
    			$(this).children().last().html('expand_less');
    		else
    			$(this).children().last().html('expand_more');
 		});

		// Controls subaccordions
 		this.editSideOptions.on('click', '.accordion-subheader', function() {
    		$(this).toggleClass('active').next().slideToggle();
    		if ($(this).hasClass('active'))
    			$(this).children().last().html('close');
    		else
    			$(this).children().last().html('edit');
 		});

	}



	/*   PUBLIC   */

	/* Set Options - public
	 * ---------------
	 * Changes side bar options depending on which step the user is on.
	 */
	setOptions(step) {
		if (step === 0) {
			this.editSideOptions.show(delay);
			this.mailingSideOptions.hide(delay);
			this.sideBar.show(delay);
		} else if (step === 1) {
			this.mailingSideOptions.show(delay);
			this.editSideOptions.hide(delay);
			this.sideBar.show(delay);
		} else {
			this.sideBar.hide(delay);
		}
	}

	/* Initialize - public
	 * ---------------
	 * Populates the side bar with all system options.
	 */
	initialize() {
		this.populateColorSchemes();
		this.populateFontStyles();
	}

	/* Populate Color Schemes - public
	 * ---------------
	 * Populates the color schemes with system schemes.
	 */
	populateColorSchemes() {
		for (let scheme in COLOR_SCHEMES) {
			let colorScheme = COLOR_SCHEMES[scheme];
			let container = $('<div id="' + scheme + '" class="color-scheme-container"></div>');
			this.colorSchemeContent.append(container);
			container.append($('<i class="material-icons">fiber_manual_record</i>'));
			container.append($('<span>' + scheme + '</span>'));
			container.append($('<div class="primary" style="background-color: ' + colorScheme['primary'] + ';"></div>'));
			container.append($('<div class="secondary" style="background-color: ' + colorScheme['secondary'] + ';"></div>'));
			container.append($('<div class="tertiary" style="background-color: ' + colorScheme['tertiary'] + ';"></div>'));
			container.append($('<div class="quaternary" style="background-color: ' + colorScheme['quaternary'] + ';"></div>'));

			container.click((e) => {
				this.colorSchemeCallback(e.currentTarget.id);
			});
		}
	}

	/* Populate Font Styles - public
	 * ---------------
	 * Populates the font styles with system styles.
	 */
	populateFontStyles() {
		for (let font in FONT_STYLES) {
			let container = $('<div id="' + font + '" class="font-style-container"></div>');
			this.fontStyleContent.append(container);
			container.append($('<i class="material-icons">fiber_manual_record</i>'));
			container.append($('<span style="font-family:' + font + '">' + font + '</span>'));

			container.click((e) => {
				this.fontStyleCallback(e.currentTarget.id);
			});
		}
	}

	/* Populate Navigation - public
	 * ---------------
	 * Populates the navigation content with each half-page of the PMA.
	 */
	populateNavigation(canvases) {
		this.navigationContent.empty();
		for (let canvas of canvases) {
			let navPageLeft = $('<img class="navigation-page">');
			let navPageRight = $('<img class="navigation-page">');
			const leftSpread = crop(canvas, {x: 0, y: 0}, {x: canvas.width / 2, y: canvas.height})
			const rightSpread = crop(canvas, {x: canvas.width / 2, y: 0}, {x: canvas.width, y: canvas.height})
			navPageLeft.attr('src', leftSpread.toDataURL());
			navPageRight.attr('src', rightSpread.toDataURL());

			this.navigationContent.append(navPageLeft);
			this.navigationContent.append(navPageRight);
		}
	}

 }
/* MQ PMA Creator - Main Window
* Author: bhuelga
*/

class MainWindow {

	/* Main Window
	 * ---------------
	 * The main window that controls editing, mailing list, and preview.
	 */
	constructor() {
		this._querySelectors();
		this._addEventListeners();
	}

	/* Query Selectors - private
	 * ---------------
	 * Selects all sections of PMA screen.
	 */
	_querySelectors() {
		// Edit Window
		this.editWindow = $('#edit-window');
		this.outsidePage = $('#outside-page');
		this.outsideCanvas = $('#outside-canvas');
		this.insidePage = $('#inside-page');
		this.insideCanvas = $('#inside-canvas');

		// Mailing Window
		this.mailingWindow = $('#mailing-window');
		this.previewWindow = $('#preview-window');
	}

	/* Add Event Listeners - private
	 * ---------------
	 * Sets event listeners.
	 */
	_addEventListeners() {

	}

	_makeToggleOverlay(top, left) {
		let toggleOverlay = $(switchHTML);
		toggleOverlay.css('top', top);
		toggleOverlay.css('left', left);
		return toggleOverlay;
	}

	_makeEditOverlay(name, top, left, height, width, content, status, editTop, editLeft, canvas) {
		let editOverlay = $('<div class="edit-overlay"></div>');
		editOverlay.css('top', editTop);
		editOverlay.css('left', editLeft);

		editOverlay.append($('<h2>' + name + '</h2>'));
		let editOverlayContent = $('<div class="overlay-content"></div>');
		for (let choice of content) {
			let newImage = $('<img src="' + choice + '">');
			newImage.data('top', top);
			newImage.data('left', left);
			newImage.data('height', height);
			newImage.data('width', width);
			newImage.data('canvas', canvas);
			editOverlayContent.append(newImage);
		}
		editOverlay.append(editOverlayContent);

		return editOverlay;
	}

	/*   PUBLIC   */

	/* Get Spreads - public
	 * ---------------
	 * Returns all editable canvases.
	 */
	getCanvases() {
		return [this.outsideCanvas[0], this.insideCanvas[0]];
	}

	/* Set Window - public
	 * ---------------
	 * Sets the display window to be the edit, mailing, or preview window.
	 */
	setWindow(window) {
		if (window === 0)
			showHide(this.editWindow, this.mailingWindow, this.previewWindow);
		else if (window === 1)
			showHide(this.mailingWindow, this.editWindow, this.previewWindow);
		else
			showHide(this.previewWindow, this.mailingWindow, this.editWindow);

		function showHide(show, hide1, hide2) {
			hide1.fadeOut(300);
			hide2.fadeOut(300);
			show.delay(300).fadeIn(300);
		}
	}

	/* Add Sections - public
	 * ---------------
	 * Adds all graphics to a spread in the edit window.
	 */
	populateSections(outsideStatic, outsideEdit, insideStatic, insideEdit, sections) {
		// Reset canvas
		helper = helper.bind(this);
		helper(this.outsidePage, this.outsideCanvas[0], outsideStatic, outsideEdit, sections);
		helper(this.insidePage, this.insideCanvas[0], insideStatic, insideEdit, sections);
		$('.overlay-content img').click(function(e) {
			const img = $(e.target);
			const context = img.data('canvas').getContext('2d');
			let imgData = new Image();
			imgData.onload = () => {
				context.drawImage(imgData, img.data('left'), img.data('top'), 
								  img.data('width'), img.data('height'));
			};
			imgData.src = img.attr('src');
			
		});

		function helper(spread, canvas, statics, edits, sections) {
			const context = canvas.getContext('2d');
			context.clearRect(0, 0, canvas.width, canvas.height);
			context.fillStyle = "#FFFFFF";
			context.fillRect(0, 0, canvas.width, canvas.height);

			// Fill all static sections
			for (let section of statics) {
				if (section['type'] === 'image') {
					let img = new Image();
					img.onload = () => {
						context.drawImage(img, section['coordinates'][1], section['coordinates'][0],
										  section['size'][1], section['size'][0]);
					};
					img.src = section['src'];
				} else if (section['type'] === 'text') {
					context.font = 'bold ' + section['font-size'] + 'px Ubuntu';
					context.fillStyle = section['font-color'];
					context.fillText(section['text'], section['coordinates'][1], section['coordinates'][0]);
				}
			}

			// Fill all editable sections
			for (let section of edits) {
				let div = $('<div id="' + NAME_TO_ID[section['name']] + '" class="overlay"></div>');
				div.height(section['height']);
				div.width(section['width']);
				div.css('top', section['top']);
				div.css('left', section['left']);
				div.append(this._makeToggleOverlay(section['toggle-top'], section['toggle-left']));
				div.append(this._makeEditOverlay(section['name'],
												 section['top'], section['left'],
												 section['height'], section['width'],
												 sections[section['name']]['system-choices'],
												 sections[section['name']]['status'], 
												 section['edit-top'], section['edit-left'],
												 canvas));
				spread.append(div);
			}
		}
	}
}
/* MQ PMA Creator
 * Author: bhuelga
 */

const creatorType = 'mq';

class MQPmaCreator {

	/* MQ Pma Creator
	 * ---------------
	 * Controls full creator app.
	 */
	constructor() {
		this._bindToCallbacks();
		this._initializeSections();
		this._initializeApp();
	}

	/* Bind To Callbacks - private
	 * ---------------
	 * Binds this to all callback functions.
	 */
	_bindToCallbacks() {
		this._switchArea = this._switchArea.bind(this);
		this._switchWindow = this._switchWindow.bind(this);		
	}

	/* Intialize Sections - private
	 * ---------------
	 * Creates new instances of sections of PMA creator.
	 */
	_initializeSections() {
		this.topBar = new TopBar(this._switchArea, this._switchWindow);
		this.mainWindow = new MainWindow(this._enterEditMode, this._markAs);
	}

	/* Intialize App - private
	 * ---------------
	 * Initializes local data.
	 */
	_initializeApp() {		
		this.localData = localData['mlsAreas'];
		this.template = templates[creatorType];

		this.currentArea = 'Carmel Highlands';
		this._switchArea(this.currentArea);

		// populates edit window
		const outsideStaticSections = this.template['Outside']['static-sections'];
		const outsideEditSections = this.template['Outside']['edit-sections'];
		const insideStaticSections = this.template['Inside']['static-sections'];
		const insideEditSections = this.template['Inside']['edit-sections'];
		this.mainWindow.populateSections(outsideStaticSections, outsideEditSections, 
										 insideStaticSections, insideEditSections,
										 this.localData[this.currentArea]['sections']);
	}



	/*   CALLBACK FUNCTIONS   */

	/* Switch Area - private
	 * ---------------
	 * Switches the main window and changes the side bar options.
	 */
	_switchArea(newArea) {
		this.currentArea = newArea;
		this.topBar.setAreaTitle(newArea);
		// update pma
	}

	/* Switch Window - private
	 * ---------------
	 * Switches the main window and changes the side bar options.
	 */
	_switchWindow(step) {
		this.mainWindow.setWindow(step);
	}

}

const mqPmaCreator = new MQPmaCreator();
